{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"datasummary","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"p2N-k7isS7BQ"},"source":["\n","# Tag counting"]},{"cell_type":"code","metadata":{"id":"MFjy5NfXBkZK","executionInfo":{"status":"ok","timestamp":1606124171776,"user_tz":-420,"elapsed":3425,"user":{"displayName":"Uyên Phạm","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_6Kb2_K--e8kXmNXf29mrXIvbAmdVF_kW9rXEtg=s64","userId":"05270665055871657419"}},"outputId":"4f5b4da7-9dca-402a-96f3-feb331a8b465","colab":{"base_uri":"https://localhost:8080/"}},"source":["DATA_PATH = 'gs://yn-ml-models/'\n","!gsutil ls -l $DATA_PATH"],"execution_count":1,"outputs":[{"output_type":"stream","text":["    294811  2018-10-09T06:57:00Z  gs://yn-ml-models/VOE-Image-1.jpg\n"," 114441858  2018-10-03T03:43:53Z  gs://yn-ml-models/basic-nlp-models.zip\n"," 172272626  2019-03-15T08:49:31Z  gs://yn-ml-models/chatbot_acb_v1.tgz\n"," 172124430  2019-03-15T08:49:41Z  gs://yn-ml-models/chatbot_acb_v2.tgz\n"," 172138318  2019-03-19T07:42:42Z  gs://yn-ml-models/chatbot_acb_v3.tgz\n"," 171482026  2019-03-22T11:06:00Z  gs://yn-ml-models/chatbot_acb_v4.tgz\n"," 171480513  2019-03-26T08:56:57Z  gs://yn-ml-models/chatbot_acb_v5.tgz\n"," 171242293  2019-03-27T08:13:24Z  gs://yn-ml-models/chatbot_acb_v6.tgz\n"," 171201016  2019-03-29T07:17:17Z  gs://yn-ml-models/chatbot_acb_v7.tgz\n"," 171200760  2019-03-29T15:43:08Z  gs://yn-ml-models/chatbot_acb_v8.tgz\n","  42514535  2018-11-07T09:06:19Z  gs://yn-ml-models/cnn_tokenizer.pkl\n","   1240328  2020-01-15T02:40:05Z  gs://yn-ml-models/customerservice_clf_model_231219.pkl\n","  32327752  2018-09-12T03:27:28Z  gs://yn-ml-models/draft_model_v1.0.h5\n","  32327752  2018-09-12T03:32:26Z  gs://yn-ml-models/draft_text_recommend_model_v1.0.h5\n"," 212046774  2020-03-31T13:07:52Z  gs://yn-ml-models/hadoop-2.7.2.tar.gz\n","  25969912  2018-11-29T04:30:45Z  gs://yn-ml-models/influencer_resonance_v1.0.tar.xz\n"," 142937361  2019-06-14T12:58:52Z  gs://yn-ml-models/influencer_resonance_v2.tar.gz\n"," 263099713  2018-10-29T07:12:37Z  gs://yn-ml-models/intent_pytorch.zip\n"," 184083804  2019-06-27T08:52:02Z  gs://yn-ml-models/jdk1.8.zip\n","2118672518  2018-11-07T09:21:02Z  gs://yn-ml-models/junk_ads_1.1\n"," 976633743  2018-11-07T09:16:10Z  gs://yn-ml-models/junk_ads_1.2.3\n","   7982894  2019-08-28T08:00:45Z  gs://yn-ml-models/mongodb-mms-automation-agent-manager_5.4.21.5544-1_amd64.ubuntu1604.deb\n"," 847650354  2018-11-07T09:14:47Z  gs://yn-ml-models/multi_labels_2.0\n","4207184839  2020-04-09T07:18:39Z  gs://yn-ml-models/mynulled.me10.gz \n","  44825590  2018-11-07T09:06:12Z  gs://yn-ml-models/naive_bayes\n"," 460412190  2019-09-03T08:38:39Z  gs://yn-ml-models/price_question_model_v1.0.pkl\n","   3811945  2019-09-13T04:43:40Z  gs://yn-ml-models/price_question_model_v1.1.pkl\n","  34286086  2018-11-20T07:22:16Z  gs://yn-ml-models/short_mention_negative_v1.1.2.tar.gz\n","  33647520  2018-11-20T07:06:45Z  gs://yn-ml-models/short_mention_negative_v1.1.3.3.tar.gz\n","  33645632  2018-11-21T04:26:14Z  gs://yn-ml-models/short_mention_negative_v1.1.8.tar.gz\n","  33644791  2018-12-25T09:49:31Z  gs://yn-ml-models/short_mention_negative_v1.1.9.tar.gz\n","  33655898  2019-04-09T21:45:18Z  gs://yn-ml-models/short_mention_negative_v2.0.0.tar.gz\n","  33657641  2019-08-28T19:29:30Z  gs://yn-ml-models/short_mention_negative_v2.0.1.tar.gz\n"," 116564462  2019-10-02T19:59:21Z  gs://yn-ml-models/short_mention_negative_v2.0.2.tar.gz\n","  33635516  2019-10-16T15:23:19Z  gs://yn-ml-models/short_mention_negative_v2.0.3.tar.gz\n","  33828982  2018-11-20T07:22:14Z  gs://yn-ml-models/short_mention_positive_v1.1.2.tar.gz\n","  32898081  2018-11-20T07:06:39Z  gs://yn-ml-models/short_mention_positive_v1.1.3.3.tar.gz\n","  32842358  2018-11-21T04:26:02Z  gs://yn-ml-models/short_mention_positive_v1.1.8.tar.gz\n","  32845617  2018-12-25T09:48:42Z  gs://yn-ml-models/short_mention_positive_v1.1.9.tar.gz\n","  32844309  2019-04-10T03:27:31Z  gs://yn-ml-models/short_mention_positive_v2.0.0.tar.gz\n","  32828824  2019-08-28T19:29:34Z  gs://yn-ml-models/short_mention_positive_v2.0.1.tar.gz\n"," 106465325  2019-10-02T19:59:32Z  gs://yn-ml-models/short_mention_positive_v2.0.2.tar.gz\n","  32851738  2019-10-16T15:23:24Z  gs://yn-ml-models/short_mention_positive_v2.0.3.tar.gz\n"," 169503220  2020-07-09T03:17:01Z  gs://yn-ml-models/solr-7.5.0.zip\n","  48827823  2019-04-10T14:00:53Z  gs://yn-ml-models/spam_data.tar.gz\n","  12316496  2018-11-21T07:03:44Z  gs://yn-ml-models/test_dataset_1.0.csv\n","  14077672  2018-11-21T07:03:44Z  gs://yn-ml-models/test_dataset_1.1.csv\n","  14584584  2018-11-21T07:03:44Z  gs://yn-ml-models/test_dataset_1.2.csv\n","  14085095  2018-11-21T07:03:36Z  gs://yn-ml-models/test_dataset_1.3.csv\n","  14720594  2018-11-21T07:03:36Z  gs://yn-ml-models/test_dataset_1.4.csv\n","  15923109  2018-11-21T07:03:36Z  gs://yn-ml-models/test_dataset_1.5.csv\n","  16935935  2018-12-25T09:04:36Z  gs://yn-ml-models/test_dataset_1.6.csv\n","  18686573  2019-04-10T03:31:45Z  gs://yn-ml-models/test_dataset_1.7.csv\n","  18686573  2019-10-02T19:59:36Z  gs://yn-ml-models/test_dataset_1.8.csv\n","  19870990  2019-10-16T15:23:28Z  gs://yn-ml-models/test_dataset_1.9.csv\n","  32327752  2018-09-17T05:03:26Z  gs://yn-ml-models/text_recommend_model_v1.0.h5\n","   3913752  2018-11-01T07:42:58Z  gs://yn-ml-models/tf_cnn_intent.zip\n","  46839354  2018-11-07T09:06:15Z  gs://yn-ml-models/tf_cnn_model.zip\n","  48435440  2019-04-10T06:23:42Z  gs://yn-ml-models/tf_spam_model_v1.tar.gz\n"," 370931657  2020-08-19T05:06:18Z  gs://yn-ml-models/tf_spam_model_v10.tar.gz\n"," 152027180  2020-10-15T08:49:13Z  gs://yn-ml-models/tf_spam_model_v11.tar.gz\n","  21821209  2019-04-22T15:39:57Z  gs://yn-ml-models/tf_spam_model_v2.tar.gz\n","  59656105  2019-04-26T02:55:10Z  gs://yn-ml-models/tf_spam_model_v3.tar.gz\n","  68889994  2019-05-24T09:58:59Z  gs://yn-ml-models/tf_spam_model_v4.tar.gz\n","  63529566  2019-07-08T07:02:12Z  gs://yn-ml-models/tf_spam_model_v5.tar.gz\n","  73243929  2019-08-12T07:19:47Z  gs://yn-ml-models/tf_spam_model_v6.tar.gz\n","  95811028  2020-01-07T03:14:11Z  gs://yn-ml-models/tf_spam_model_v7.tar.gz\n","  95946441  2020-04-27T09:13:02Z  gs://yn-ml-models/tf_spam_model_v8.tar.gz\n","  14479660  2020-06-08T04:31:53Z  gs://yn-ml-models/tf_spam_model_v9.tar.gz\n","  58879270  2019-04-29T15:26:35Z  gs://yn-ml-models/transformer_spam_model_v1.tar.gz\n","  19812922  2018-11-20T07:06:03Z  gs://yn-ml-models/veryshort_mention_negative_v0.9.tar.gz\n","    224659  2018-11-20T07:06:06Z  gs://yn-ml-models/veryshort_word_embedding_v0.9.tar.gz\n","     43739  2018-09-17T05:00:06Z  gs://yn-ml-models/vocab_v1.0.txt\n","  17006246  2018-11-20T07:06:49Z  gs://yn-ml-models/word_embedding_v1.1.tar.gz\n","  17006240  2018-11-20T07:21:23Z  gs://yn-ml-models/word_embedding_v1.tar.gz\n","                                 gs://yn-ml-models/dataset/\n","                                 gs://yn-ml-models/diacritics_restoration/\n","                                 gs://yn-ml-models/resonance/\n","                                 gs://yn-ml-models/spam-category/\n","                                 gs://yn-ml-models/tag_clf/\n","TOTAL: 75 objects, 13420788242 bytes (12.5 GiB)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"768g1vzaaUY4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605842369948,"user_tz":-420,"elapsed":4850,"user":{"displayName":"Uyên Phạm","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_6Kb2_K--e8kXmNXf29mrXIvbAmdVF_kW9rXEtg=s64","userId":"05270665055871657419"}},"outputId":"4d80d344-5a48-40e9-c38f-1f0b7b84ae53"},"source":["\"\"\"\n","For getting file from gcloud\n","\"\"\"\n","# DATA_PATH = 'gs://yn-ml-models/tag_clf/temp/'\n","# !gsutil ls -l $DATA_PATH\n","\n","# # Cloning data to the context\n","# !gsutil cp -r gs://yn-ml-models/tag_clf/temp/* ."],"execution_count":null,"outputs":[{"output_type":"stream","text":["         0  2020-11-02T03:27:27Z  gs://yn-ml-models/tag_clf/temp/\n"," 984191659  2020-11-02T11:10:46Z  gs://yn-ml-models/tag_clf/temp/CLOUD_August_MILK.csv\n"," 389164508  2020-11-02T11:21:38Z  gs://yn-ml-models/tag_clf/temp/CLOUD_July_MILK.csv\n"," 580825570  2020-11-02T10:38:27Z  gs://yn-ml-models/tag_clf/temp/CLOUD_MARJUN_MILK.csv\n","2232045828  2020-11-02T12:26:30Z  gs://yn-ml-models/tag_clf/temp/CLOUD_September_MILK.csv\n","     49693  2020-11-02T11:21:39Z  gs://yn-ml-models/tag_clf/temp/CLOUD_milk_attribute_mapping.py\n","     65381  2020-11-02T11:21:40Z  gs://yn-ml-models/tag_clf/temp/CLOUD_milk_kw_ref.py\n","     65381  2020-11-02T07:29:20Z  gs://yn-ml-models/tag_clf/temp/milk_kw_ref.py\n","  76017368  2020-11-17T02:43:04Z  gs://yn-ml-models/tag_clf/temp/sentiment_mapping_August.csv\n","  39678861  2020-11-17T02:44:11Z  gs://yn-ml-models/tag_clf/temp/sentiment_mapping_July.csv\n","  79867511  2020-11-17T06:31:37Z  gs://yn-ml-models/tag_clf/temp/sentiment_mapping_MARJUN.csv\n"," 245651885  2020-11-17T02:51:18Z  gs://yn-ml-models/tag_clf/temp/sentiment_mapping_September.csv\n","      6313  2020-11-02T03:40:06Z  gs://yn-ml-models/tag_clf/temp/tag_id_by_name.py\n","TOTAL: 13 objects, 4627629958 bytes (4.31 GiB)\n","Failed to import the site module\n","Traceback (most recent call last):\n","  File \"/usr/lib/python3.6/site.py\", line 570, in <module>\n","^C\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KUx2_FvXiCLc","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1605010901965,"user_tz":-420,"elapsed":66307,"user":{"displayName":"Uyên Phạm","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_6Kb2_K--e8kXmNXf29mrXIvbAmdVF_kW9rXEtg=s64","userId":"05270665055871657419"}},"outputId":"a428829e-9f0e-4924-fdcf-0ba61d3f3124"},"source":["\"\"\"\n","For getting file from local\n","\"\"\"\n","# from google.colab import files\n","\n","# uploaded = files.upload()\n","\n","# for fn in uploaded.keys():\n","#   print('User uploaded file \"{name}\" with length {length} bytes'.format(\n","#       name=fn, length=len(uploaded[fn])))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\nFor getting file from local\\n'"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"tvfI8EDFQilx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605842542843,"user_tz":-420,"elapsed":146839,"user":{"displayName":"Uyên Phạm","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_6Kb2_K--e8kXmNXf29mrXIvbAmdVF_kW9rXEtg=s64","userId":"05270665055871657419"}},"outputId":"3a98fd3a-0606-4b6a-8c74-f73d7f8a825f"},"source":["\"\"\"\n","For getting file from gdrive\n","\"\"\"\n","\n","from google.colab import drive\n","drive.mount('/gdrive')\n","\n","DATA_PATH = \"/gdrive/My Drive/nlp/sentiment/temp\"\n","!ls -l \"$DATA_PATH\"\n","!cp -r \"$DATA_PATH\" ."],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /gdrive\n","total 4088297\n","-rw------- 1 root root  984191659 Nov  2 12:30 CLOUD_August_MILK.csv\n","-rw------- 1 root root  389164508 Nov  2 12:30 CLOUD_July_MILK.csv\n","-rw------- 1 root root  580825570 Nov  2 12:30 CLOUD_MARJUN_MILK.csv\n","-rw------- 1 root root      49693 Nov  2 12:31 CLOUD_milk_attribute_mapping.py\n","-rw------- 1 root root      65381 Nov  2 12:31 CLOUD_milk_kw_ref.py\n","-rw------- 1 root root 2232045828 Nov  2 12:31 CLOUD_September_MILK.csv\n","-rw------- 1 root root      65381 Nov  2 12:31 milk_kw_ref.py\n","-rw------- 1 root root       6313 Nov  2 12:31 tag_id_by_name.py\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Fhbyhcm_Zmx2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605843007357,"user_tz":-420,"elapsed":927,"user":{"displayName":"Uyên Phạm","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_6Kb2_K--e8kXmNXf29mrXIvbAmdVF_kW9rXEtg=s64","userId":"05270665055871657419"}},"outputId":"ff701a78-0427-4db9-ab05-f811dc40e4ed"},"source":["import glob\n","import os \n","from os import path\n","\n","datafiles = []\n","for path in glob.iglob(os.path.join('/content/temp', \"*.csv\")):\n","    datafiles.append(path)\n","\n","datafiles"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['/content/temp/CLOUD_MARJUN_MILK.csv',\n"," '/content/temp/CLOUD_September_MILK.csv',\n"," '/content/temp/CLOUD_August_MILK.csv',\n"," '/content/temp/CLOUD_July_MILK.csv']"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"fruxqSltH2KU"},"source":["# IMPORT LIBRARIES\n","\n","import pandas as pd\n","from temp.CLOUD_milk_attribute_mapping import MILK_ATTRIBUTE_MAPPING\n","import functools as ft\n","\n","# Setting pandas to display all content \n","pd.set_option(\"display.max_colwidth\", 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WfsxS7w2GRxU"},"source":["\"\"\"\n","Map tagid to tagname\n","\"\"\"\n","tag_name_by_tagid = lambda tagid: [key for key in TAG_ID.keys() if tagid in TAG_ID[key]]\n","\n","\"\"\"\n","Get tagid list from tag string\n","\"\"\"\n","get_tagid_list_from_string = lambda tagstr: [int(t) for t in tagstr.strip('[').strip(']').split(', ') if t!='']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"A2teURXDHQdg"},"source":["def count_by_tag(keys, tagseries):\n","    \"\"\"\n","    Return 2 dictionaries:\n","        __tag_count: to map each tag to the corresponding number of document with that tag\n","        __sgl_tag_count: to map each tag with corresponding number of documents have that tag as single tag\n","    \"\"\"\n","    __tag_count = dict((k, 0) for k in keys)\n","    __sgl_tag_count = dict((k, 0) for k in keys)\n","\n","    for tagstring in tagseries: \n","        tags = get_tagid_list_from_string(tagstring)\n","        \n","        # Nếu list tag không có tag nào thì cộng 1 vào 'no-tag'\n","        if tags==[]: __tag_count['no-tag'] += 1\n","\n","        # Map tagid to tagname\n","        # Any tagid connot be mapped: ignore it\n","        tagnames = set()\n","        for tag in tags: \n","            try:\n","                tagnames.add(MILK_ATTRIBUTE_MAPPING[tag])\n","            except:\n","                pass\n","\n","        # Voi moi tag có trong tag list của document thì add 1 vào key tương ứng trong dictionary __tag_count\n","        # Nếu không tìm thấy tag tương ứng thì add 1 vào key undefined\n","        for tagname in tagnames:\n","            __tag_count[tagname] += 1\n","\n","        # Nếu list tags chỉ có 1 tag \"T\" thì add 1 vào T trong dictionary \n","        # Nếu không tìm thấy tag tương ứng thì add 1 vào key undefined\n","        if len(tagnames) == 1:\n","            (element,) = tagnames\n","            __sgl_tag_count[element] += 1\n","\n","    return __tag_count, __sgl_tag_count"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"M9hyPvlKRSO2"},"source":["def get_tagname_list_from_string(tagstring): \n","    tags = get_tagid_list_from_string(tagstring)\n","    tagnames = set()\n","    for tag in tags: \n","        try:\n","            tagnames.add(MILK_ATTRIBUTE_MAPPING[tag])\n","        except:\n","            pass\n","    return tagnames\n","\n","def get_sgl_tag_doc(df):\n","    def mapfunc(row):\n","        # print(row)\n","        tagnames = get_tagname_list_from_string(row.tags)\n","        if len(tagnames) == 1:\n","            return (row.id, tagnames)\n","    df = df.apply(mapfunc, axis=1).dropna()\n","    return df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"daeP2ux7ZZ5R"},"source":["RESULT_PATH = '/content/summary/'\n","\n","if not os.path.exists(RESULT_PATH):\n","    os.makedirs(RESULT_PATH)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r0C8LTFAOe5L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605843173478,"user_tz":-420,"elapsed":80153,"user":{"displayName":"Uyên Phạm","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_6Kb2_K--e8kXmNXf29mrXIvbAmdVF_kW9rXEtg=s64","userId":"05270665055871657419"}},"outputId":"b9691ffc-a461-4d22-b38b-9c7c67116da0"},"source":["__TAGSET__ = set(MILK_ATTRIBUTE_MAPPING.values())\n","__TAGSET__.add('no-tag')\n","__SINGLE_TAG__ = []\n","\n","for file in datafiles:\n","    df = pd.read_csv(file)\n","\n","    #========================Overview=========================#\n","    # PRINT TO PREVIEW\n","    # __FIELDS__ = df.columns\n","    # print(df.sample(5))\n","    # print(\"Data describe: \", df.describe())\n","    # print(\"Data size: \", df.count())\n","    # print(__FIELDS__)\n","\n","    #========================Counting=========================#\n","    # Get only 'tags' column for counting\n","    series = df.tags\n","    __TAG_COUNT_DICT__, __SINGLE_TAG_COUNT_DICT__ = count_by_tag(__TAGSET__, series)\n","\n","    d = {}\n","    for tag in __TAGSET__: \n","        d[tag] = (__TAG_COUNT_DICT__[tag], __SINGLE_TAG_COUNT_DICT__[tag])\n","\n","    # Combine the two dicts to one dataframe\n","    df_res = pd.DataFrame.from_dict(d, orient='index')\n","    df_res = df_res.reset_index()\n","    df_res.columns=['TagId', 'N Document', 'N SglTag Document']\n","\n","    # Write to file\n","    # w_name = '/content/summary/' + file.split('/')[-1].split('.')[0]+'_summary.csv'\n","    # df_res.to_csv(w_name, header=True)\n","\n","\n","    #========================Extracting=========================#\n","\n","    # df1 = df[['id', 'tags']]\n","    # __SINGLE_TAG__.append(get_sgl_tag_doc(df1))\n","    # ids = [r.id for r in __SINGLE_TAG__]\n","    # tags = [r.tags for r in __SINGLE_TAG__]\n","    # pd.DataFrame(data=[ids, tags]).transpose()\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                  TagId  N Document  N SglTag Document\n","0   F-Goodingeneral      9568        6767             \n","1   N-SpoiledMilk        0           0                \n","2   O-Expirationdate     328         90               \n","3   F-Innerheat          6446        1033             \n","4   E-Loyalconsumers     1040        369              \n","..               ...      ...        ...              \n","59  MKT-Gift             3307        2773             \n","60  PD-Quality           960         262              \n","61  MKT-CustomerService  164         37               \n","62  F-Diarrhea           372         208              \n","63  N-Milkbubble         374         289              \n","\n","[64 rows x 3 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (10,11) have mixed types.Specify dtype option on import or set low_memory=False.\n","  interactivity=interactivity, compiler=compiler, result=result)\n"],"name":"stderr"},{"output_type":"stream","text":["                  TagId  N Document  N SglTag Document\n","0   F-Goodingeneral      12174       8057             \n","1   N-SpoiledMilk        0           0                \n","2   O-Expirationdate     672         206              \n","3   F-Innerheat          9527        1855             \n","4   E-Loyalconsumers     526         178              \n","..               ...     ...         ...              \n","59  MKT-Gift             7933        5946             \n","60  PD-Quality           9190        3384             \n","61  MKT-CustomerService  205         66               \n","62  F-Diarrhea           207         91               \n","63  N-Milkbubble         53          33               \n","\n","[64 rows x 3 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (10,11) have mixed types.Specify dtype option on import or set low_memory=False.\n","  interactivity=interactivity, compiler=compiler, result=result)\n"],"name":"stderr"},{"output_type":"stream","text":["                  TagId  N Document  N SglTag Document\n","0   F-Goodingeneral      2361        1788             \n","1   N-SpoiledMilk        0           0                \n","2   O-Expirationdate     594         168              \n","3   F-Innerheat          321         117              \n","4   E-Loyalconsumers     145         63               \n","..               ...     ...         ..               \n","59  MKT-Gift             1869        1523             \n","60  PD-Quality           976         297              \n","61  MKT-CustomerService  100         17               \n","62  F-Diarrhea           27          19               \n","63  N-Milkbubble         9           3                \n","\n","[64 rows x 3 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (10,11) have mixed types.Specify dtype option on import or set low_memory=False.\n","  interactivity=interactivity, compiler=compiler, result=result)\n"],"name":"stderr"},{"output_type":"stream","text":["                  TagId  N Document  N SglTag Document\n","0   F-Goodingeneral      1548        1130             \n","1   N-SpoiledMilk        0           0                \n","2   O-Expirationdate     536         146              \n","3   F-Innerheat          277         104              \n","4   E-Loyalconsumers     128         58               \n","..               ...     ...         ..               \n","59  MKT-Gift             1645        1346             \n","60  PD-Quality           794         235              \n","61  MKT-CustomerService  75          17               \n","62  F-Diarrhea           12          6                \n","63  N-Milkbubble         9           3                \n","\n","[64 rows x 3 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2lIf3PL8N7q6"},"source":["Note:\n","- Tag -1\n","- duplicated tag"]},{"cell_type":"code","metadata":{"id":"Fy6Q_5iJuFIz"},"source":["tagset_stored = zip(range(0, len(__TAGSET__)), __TAGSET__)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"08PVKdCCuRb5","executionInfo":{"status":"ok","timestamp":1605843376356,"user_tz":-420,"elapsed":1110,"user":{"displayName":"Uyên Phạm","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_6Kb2_K--e8kXmNXf29mrXIvbAmdVF_kW9rXEtg=s64","userId":"05270665055871657419"}},"outputId":"c57581db-4987-447e-d625-96e3e9d2ac7f"},"source":["tagset_stored"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<zip at 0x7f0c831c41c8>"]},"metadata":{"tags":[]},"execution_count":13}]}]}